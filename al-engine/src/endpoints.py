# endpoints.py - Flask API Route Handlers for AL-Engine

import json
import time
import logging
from pathlib import Path
from flask import request, jsonify

logger = logging.getLogger(__name__)

class ALEngineEndpoints:
    """Flask route handlers for AL-Engine API"""
    
    def __init__(self, server_instance):
        """Initialize with reference to ALEngineServer instance"""
        self.server = server_instance
    
    def setup_routes(self, app):
        """Setup all Flask API routes"""
        
        # Add CORS support for cross-origin requests from JupyterLab
        @app.after_request
        def after_request(response):
            """Add CORS headers to all responses"""
            response.headers.add('Access-Control-Allow-Origin', '*')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
            response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
            response.headers.add('Access-Control-Allow-Credentials', 'true')
            return response
        
        # Handle preflight OPTIONS requests
        @app.route('/<path:path>', methods=['OPTIONS'])
        def handle_options(path):
            """Handle preflight requests for all routes"""
            return '', 200
        
        # Health check endpoint
        @app.route('/health', methods=['GET'])
        def health_check():
            """Health check endpoint"""
            return jsonify({
                'status': 'healthy',
                'project_id': self.server.project_id,
                'computation_mode': 'local',
                'timestamp': time.time()
            })

        # Start AL iteration endpoint
        @app.route('/start_iteration', methods=['POST'])
        def start_iteration():
            """Start AL iteration endpoint"""
            try:
                data = request.get_json()
                if not data:
                    return jsonify({'error': 'No JSON data provided'}), 400
                
                iteration = data.get('iteration')
                if not iteration:
                    return jsonify({'error': 'iteration number is required'}), 400
                
                logger.info(f"üì® Received start_iteration request for iteration {iteration}")
                
                # Execute AL iteration locally
                result = self.server._execute_iteration_sync(iteration, data)
                
                if result.get('success'):
                    logger.info(f"‚úÖ Iteration {iteration} completed successfully")
                    return jsonify({
                        'success': True,
                        'iteration': iteration,
                        'result': result,
                        'message': f'AL iteration {iteration} completed successfully'
                    })
                else:
                    logger.error(f"‚ùå Iteration {iteration} failed: {result.get('error')}")
                    return jsonify({
                        'success': False,
                        'iteration': iteration,
                        'error': result.get('error'),
                        'message': f'AL iteration {iteration} failed'
                    }), 500
                    
            except Exception as e:
                logger.error(f"‚ùå API error in start_iteration: {e}")
                return jsonify({
                    'success': False,
                    'error': str(e),
                    'message': 'Internal server error'
                }), 500

        # Status endpoint
        @app.route('/status', methods=['GET'])
        def get_status():
            """Get AL-Engine status"""
            return jsonify({
                'project_id': self.server.project_id,
                'computation_mode': 'local',
                'work_dir': str(self.server.work_dir) if self.server.work_dir else None,
                'config_path': self.server.config_path,  
                'running': True,
                'timestamp': time.time()
            })

        # Configuration endpoint
        @app.route('/config', methods=['GET'])
        def get_config():
            """Get current AL configuration"""
            return jsonify(self.server.config)

        # Results endpoint
        @app.route('/results/<int:iteration>', methods=['GET'])
        def get_iteration_results(iteration):
            """Get results for a specific iteration"""
            try:
                project_id = request.args.get('project_id', self.server.project_id)
                if not project_id:
                    return jsonify({'error': 'No project_id provided'}), 400
                
                # Check for actual result files generated by AL iteration
                outputs_dir = Path(f"../ro-crates/{project_id}/outputs")
                model_file = outputs_dir / "model" / f"model_round_{iteration}.pkl"
                query_samples_file = outputs_dir / f"query_samples_round_{iteration}.json"
                
                results = {
                    'iteration': iteration,
                    'project_id': project_id,
                    'files': {
                        'model': str(model_file) if model_file.exists() else None,
                        'query_samples': str(query_samples_file) if query_samples_file.exists() else None,
                        'performance': None  # Not implemented yet
                    }
                }
                
                # Load and return actual query samples if available
                if query_samples_file.exists():
                    with open(query_samples_file, 'r') as f:
                        query_samples_data = json.load(f)
                        results['query_samples'] = query_samples_data
                        logger.info(f"‚úÖ Loaded {len(query_samples_data)} query samples for iteration {iteration}")
                else:
                    logger.warning(f"‚ö†Ô∏è Query samples file not found: {query_samples_file}")
                
                return jsonify(results)
                
            except Exception as e:
                logger.error(f"‚ùå Error getting results for iteration {iteration}: {e}")
                return jsonify({'error': str(e)}), 500

        # Submit labels endpoint
        @app.route('/submit_labels', methods=['POST'])
        def submit_labels():
            """Submit labeled samples back to AL-Engine for next training iteration"""
            try:
                data = request.get_json()
                if not data:
                    return jsonify({'error': 'No JSON data provided'}), 400
                
                # Validate required fields
                required_fields = ['iteration', 'labeled_samples']
                for field in required_fields:
                    if field not in data:
                        return jsonify({'error': f'Missing required field: {field}'}), 400
                
                iteration = data.get('iteration')
                labeled_samples = data.get('labeled_samples', [])
                project_id = data.get('project_id', self.server.project_id)
                
                if not labeled_samples:
                    return jsonify({'error': 'No labeled samples provided'}), 400
                
                logger.info(f"üì® Received {len(labeled_samples)} labeled samples for iteration {iteration}")
                
                # Process and store the labeled samples
                result = self.server._process_labeled_samples(iteration, labeled_samples, project_id)
                
                if result.get('success'):
                    logger.info(f"‚úÖ Successfully processed {len(labeled_samples)} labeled samples")
                    return jsonify({
                        'success': True,
                        'iteration': iteration,
                        'samples_processed': len(labeled_samples),
                        'message': f'Successfully stored {len(labeled_samples)} labeled samples for iteration {iteration}',
                        'next_iteration_ready': result.get('next_iteration_ready', False)
                    })
                else:
                    logger.error(f"‚ùå Failed to process labeled samples: {result.get('error')}")
                    return jsonify({
                        'success': False,
                        'iteration': iteration,
                        'error': result.get('error'),
                        'message': 'Failed to process labeled samples'
                    }), 500
                    
            except Exception as e:
                logger.error(f"‚ùå API error in submit_labels: {e}")
                return jsonify({
                    'success': False,
                    'error': str(e),
                    'message': 'Internal server error while processing labeled samples'
                }), 500

        # Model performance endpoint - Real metrics from AL workflow
        @app.route('/model_performance/<int:iteration>', methods=['GET'])
        def get_model_performance(iteration):
            """Get real model performance metrics for a specific iteration"""
            try:
                project_id = request.args.get('project_id', self.server.project_id)
                if not project_id:
                    return jsonify({'error': 'No project_id provided'}), 400
                
                # Look for performance metrics file generated by AL workflow
                outputs_dir = Path(f"../ro-crates/{project_id}/outputs")
                performance_file = outputs_dir / f"performance_round_{iteration}.json"
                
                if performance_file.exists():
                    with open(performance_file, 'r') as f:
                        performance_data = json.load(f)
                        logger.info(f"‚úÖ Loaded real performance metrics for iteration {iteration}")
                        return jsonify({
                            'iteration': iteration,
                            'project_id': project_id,
                            'performance': performance_data,
                            'timestamp': time.time()
                        })
                else:
                    logger.warning(f"‚ö†Ô∏è Performance file not found: {performance_file}")
                    return jsonify({
                        'iteration': iteration,
                        'project_id': project_id,
                        'performance': None,
                        'message': 'Performance metrics not available for this iteration'
                    })
                
            except Exception as e:
                logger.error(f"‚ùå Error getting performance for iteration {iteration}: {e}")
                return jsonify({'error': str(e)}), 500

        logger.info("üì° AL-Engine API endpoints registered") 